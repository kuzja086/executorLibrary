@Глобально
структура результатРаботыКонфигуратора
    пер кодВозврата: Число
    пер текстОшибки: Строка
;


@Глобально
структура Конфигуратор
    обз пер версияПлатформы: Строка
    обз пер путьКБазе: Строка
    пер доменнаяАвторизация: Булево = Истина
    пер логин: Строка
    пер пароль: Строка
    пер хранилище: Строка
    пер пользовательХранилища: Строка
    пер парольХранилища: Строка
    пер логиКонфигуратора: Строка
    пер таймаут: Длительность = 10м

    @Глобально
    метод запуститьКонфигуратор() : результатРаботыКонфигуратора
        пер аргументы = общиеПараметрыКоманднойСтроки()
        возврат запуститьПроцесс(аргументы)
    ;

    @Глобально
    метод выгрузитьВФайлы(каталогВыгрузки: Строка): результатРаботыКонфигуратора
    
    пер аргументы = общиеПараметрыКоманднойСтроки()
    аргументы.Добавить("/DumpConfigToFiles")
    аргументы.Добавить(каталогВыгрузки)

    возврат запуститьПроцесс(аргументы)
    ;

    @Глобально
    метод загрузитьБазуИзФайлаВыгрузки(путьКфайлу: Строка): результатРаботыКонфигуратора
        пер аргументы = общиеПараметрыКоманднойСтроки()  
        аргументы.Добавить("/RestoreIB")
        аргументы.Добавить(путьКфайлу)
        
        возврат запуститьПроцесс(аргументы)  
    ;

    @Глобально
    метод загрузитьБазуИзФайлов(каталогЗагрузки: Строка): результатРаботыКонфигуратора
        пер аргументы = общиеПараметрыКоманднойСтроки()  
        аргументы.Добавить("/LoadConfigFromFiles")
        аргументы.Добавить(каталогЗагрузки)
        аргументы.Добавить("/UpdateDBCfg")
        
        возврат запуститьПроцесс(аргументы)  
    ;

    метод общиеПараметрыКоманднойСтроки(): Массив<Строка>
    пер массивАргументов = новый Массив<Строка>()
    пер имяБазы = определитьИмяБазы(путьКБазе)
    логиКонфигуратора = "cfg_%имяБазы.log"

    массивАргументов.Добавить("DESIGNER")

    массивАргументов.Добавить("/DISABLESTARTUPDIALOGS")
    массивАргументов.Добавить(путьКБазе)
    если доменнаяАвторизация
        массивАргументов.Добавить("/WA+")
    иначе
        массивАргументов.Добавить("/WA-")
        массивАргументов.Добавить("/N")
        массивАргументов.Добавить(логин)
        массивАргументов.Добавить("/P")
        массивАргументов.Добавить(пароль)
    ;
    массивАргументов.Добавить("/UC")
    массивАргументов.Добавить("123")
    массивАргументов.Добавить("/out")
    массивАргументов.Добавить(новый Файл(логиКонфигуратора).Путь)
    массивАргументов.Добавить("-NoTruncate")

    возврат массивАргументов
;

метод получитьМассивДляРаботыСХранилищем(): Массив<Строка>
    пер массивПараметровХранилища = новый Массив<Строка>()

    массивПараметровХранилища.Добавить("/ConfigurationRepositoryF")
    массивПараметровХранилища.Добавить(хранилище)
    массивПараметровХранилища.Добавить("/ConfigurationRepositoryN")
    массивПараметровХранилища.Добавить(пользовательХранилища)
    массивПараметровХранилища.Добавить("/ConfigurationRepositoryP")
    массивПараметровХранилища.Добавить(парольХранилища)

    возврат массивПараметровХранилища
;

метод определитьИмяБазы(путьКБазе: Строка): Строка
    знч образец = '\\(\w+)'
    пер рез = образец.НайтиСовпадения(путьКБазе)
    возврат рез.Первый().Группа(1)!
;

метод запуститьПроцесс(аргументы:Массив<Строка>): результатРаботыКонфигуратора
    знч ProgramFiles = СредаИсполнения.ПолучитьПеременную("ProgramFiles")    
    пер командаЗапуска = "%ProgramFiles\\1cv8\\%{версияПлатформы}\\bin\\1cv8.exe"

    пер процесс = новый ПроцессОс(командаЗапуска, аргументы, Ложь)

    процесс.Запустить()
    процесс.ОжидатьЗавершения(таймаут)
   
    пер результат = новый результатРаботыКонфигуратора()
    результат.кодВозврата = процесс.ПолучитьКодВозврата()
    результат.текстОшибки = процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
    возврат результат
;
;


@Глобально
метод выгрузитьВФайлыАвтономныйСервер()
// знч ProgramFiles = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
// пер КомандаЗапуска = "%ProgramFiles\\1cv8\\8.3.22.1851\\bin\\ibcmd.exe"

// пер Аргументы =
//     ["infobase", "config", "export", "%{реквизиты.каталогВетки}\\src\\cf", "--db-server=tmn-vtaissql01",
//     "--db-name=AIS_KSS", "--dbms=MSSQLServer", "--db-user=AIS_User", "--db-pwd=AIS_User", "--user=КозинскийСС",
//     "--password=123"]
// пер АвтономныйСервер = новый ПроцессОс(КомандаЗапуска, Аргументы, Ложь)

// АвтономныйСервер.Запустить()
// АвтономныйСервер.ОжидатьЗавершения(10м)
// записатьЛог(АвтономныйСервер.ПолучитьКодВозврата()!.ВСтроку(), потокЛога)
// записатьЛог(АвтономныйСервер.ПолучитьПотокВывода().ПрочитатьКакСтроку(), потокЛога)
;

метод обновитьИзХранилища()
// записатьЛог("Начало обновления из хранилища: %{реквизиты.путьКХранилищу} Начало: %{ДатаВремя.Сейчас()
//     .Представление("%{форматДаты}")}", потокЛога)

// пер общиеПараметры = общиеПараметрыКоманднойСтроки(реквизиты)
// пер аргументыХранилища = получитьМассивДляРаботыСХранилищем(реквизиты)
// общиеПараметры.ДобавитьВсе(аргументыХранилища)
// пер платформа = новый Платформа8(реквизиты.версия, общиеПараметры)

// пер детальныеКоманды = новый Массив<Строка>()
// детальныеКоманды.Добавить("/ConfigurationRepositoryUpdateCfg")
// детальныеКоманды.Добавить("-force")
// детальныеКоманды.Добавить("/UpdateDBCfg")

// пер результатВыгрузки = платформа.запуститьКомандуКонфигуратора(детальныеКоманды)
// записатьЛог(результатВыгрузки.кодВозврата.ВСтроку(), потокЛога)
// записатьЛог(результатВыгрузки.текстОшибки, потокЛога)
;